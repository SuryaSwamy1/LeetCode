class Solution {
public:
    int fun1(vector<int>nums,int target){
        int l=0,h=nums.size()-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if(nums[mid]>=target){
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(l<0 || l>nums.size()-1){
            return -1;
        }
        if(nums[l]!=target){
            return -1;
        }
        return l;
    }
    int fun2(vector<int>nums,int target){
        int l=0,h=nums.size()-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if(nums[mid]<=target){
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        if(h>nums.size()-1 || nums.size()<0){
            return -1;
        }
        if(nums[h]!=target){
            return -1;
        }
        return h;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
         if(nums.size()==0 || (nums.size()==1 && nums[0]!=target)){
            return {-1,-1};
        }
        if(nums.size()==1 && nums[0]==target){
            return {0,0};
        }
        if(nums.size()==2 && nums[0]!=target && nums[1]!=target){
            return {-1,-1};
        }
        int a=fun1(nums,target);
        int b=fun2(nums,target);
        if(a==-1 || b==-1){
            return {-1,-1};
        }
        return {a,b};
    }
};
