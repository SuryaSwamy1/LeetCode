/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);
        Node temp=null;
        while(!q.isEmpty()){
            Node n=q.peek();
            q.remove();
            if(n!=null){
                if(temp==null) temp=n;
                else{
                    temp.next=n;
                    temp=temp.next;
                }
                if(n.left!=null) q.add(n.left);
                if(n.right!=null) q.add(n.right);
            }
            else{
                if(!q.isEmpty()) q.add(null);
                temp=null;
            }
        }
        return root;
    }
}
