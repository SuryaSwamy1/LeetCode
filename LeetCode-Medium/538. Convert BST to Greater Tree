/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void fun(TreeNode* root,vector<int>&arr){
        if(root==NULL) return;
        arr.push_back(root->val);
        fun(root->left,arr);
        fun(root->right,arr);
    }
    int fun3(int target,vector<int>arr,vector<int>pre){
        int l=0,h=arr.size()-1,mid;
        while(l<=h){
            mid=l+(h-l)/2;
            if(arr[mid]==target) break;
            else if(arr[mid]>target) h=mid-1;
            else l=mid+1;
        }
        if(mid==0) return pre[arr.size()-1];
        return pre[arr.size()-1]-pre[mid-1];
    }
    void fun2(TreeNode* &root,vector<int>pre,vector<int>arr){
        if(root==NULL) return;
        root->val=fun3(root->val,arr,pre);
        fun2(root->left,pre,arr);
        fun2(root->right,pre,arr);
    }
    TreeNode* convertBST(TreeNode* root) {
        vector<int>arr;
        fun(root,arr);
        sort(arr.begin(),arr.end());
        vector<int>pre=arr;
        for(int i=1;i<pre.size();i++)pre[i]+=pre[i-1];
        fun2(root,pre,arr);
        return root;
    }
};
