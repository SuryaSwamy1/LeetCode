/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if(root==NULL) return true;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        bool f=0;
        int sum=INT_MIN,pd=INT_MAX;
        while(!q.empty()){
            TreeNode* n=q.front();
            q.pop();
            if(n!=NULL){
                if(f==0){
                    if(n->val%2==0) return false;
                    if(sum<n->val) sum=n->val;
                    else return false;
                }
                else if(f==1){
                    if(n->val%2!=0) return false;
                    if(pd>n->val) pd=n->val;
                    else return false;
                }
                if(n->left!=NULL) q.push(n->left);
                if(n->right!=NULL) q.push(n->right);
            }
            else{
                if(!q.empty()) q.push(NULL);
                if(f==0) f=1;
                else f=0;
                sum=INT_MIN;
                pd=INT_MAX;
                cout<<f<<" ";
            }
        }
        return true;
    }
};
