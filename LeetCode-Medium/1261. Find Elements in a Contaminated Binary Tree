/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public:
    vector<int>ans;
    void buildTree(TreeNode* root,vector<int>&ans){
        if(root==NULL) return;
        if(root->left!=NULL) root->left->val=2*root->val+1;
        if(root->right!=NULL) root->right->val=2*root->val+2;
        ans.push_back(root->val);
        buildTree(root->left,ans);
        buildTree(root->right,ans);
    }
    FindElements(TreeNode* root) {
        if(root!=NULL) root->val=0;
        buildTree(root,ans);
        sort(ans.begin(),ans.end());
    }
    
    bool find(int target) {
        int low=0,high=ans.size()-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(ans[mid]==target) return true;
            else if(ans[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return false;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
